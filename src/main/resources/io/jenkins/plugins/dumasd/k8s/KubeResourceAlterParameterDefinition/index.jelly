<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout"
         xmlns:t="/lib/hudson" xmlns:f="/lib/form">
    <link rel="stylesheet" href="${rootURL}/plugin/jenkins-k8s-utility-plugin/css/common.css"
          type="text/css"/>

    <link rel="stylesheet" href="https://unpkg.com/codemirror@5.65.17/lib/codemirror.css"/>
    <link rel="stylesheet" href="https://unpkg.com/codemirror@5.65.17/addon/lint/lint.css"/>

    <div name="parameter" id="kubeResourceEditMain" style="margin-top: 5px;">
        <input type="hidden" name="name" value="${h.escape(it.name)}"/>

        <!-- Select workloads -->
        <f:entry title="Select:" class="form-item-100">
            <select name="workloads" id="kubeWorkloadSelect" multiple="multiple" size="${it.getKeySelectSize()}"
                    onchange="updateSelectedKubeWorkloads(this)">
                <j:forEach items="${it.getKeys()}" var="key">
                    <f:option value="${key}">${key}</f:option>
                </j:forEach>
            </select>
        </f:entry>

        <div class="operate-form">
            <input id="selectAllBtn" type="button" value="Select ALL" class="form-item-1"/>
        </div>

        <!-- Selected workload tabs -->
        <div id="selectedKubeWorkloadsTab" class="tabBar">
        </div>

        <div name="value" id="kubeResourceEditPanes">
            <j:forEach items="${it.getKeys()}" var="key">
                <div name="${key}" id="kubeResource-${key}" style="display: none;">
                    <j:forEach items="${it.getItems(key)}" var="item">
                        <div name="${item.getResourceId()}">
                            <input name="apiVersion"
                                   id="kubeResourceApiVersion-${key}-${item.getResourceId()}" type="hidden"
                                   value="${item.getApiVersion()}"
                                   disabled="disabled"/>
                            <input name="kind" id="kubeResourceKind-${key}-${item.getResourceId()}" type="hidden"
                                   value="${item.getKind()}"
                                   disabled="disabled"/>
                            <input name="name" id="kubeResourceName-${key}-${item.getResourceId()}" type="hidden"
                                   value="${item.getName()}"
                                   disabled="disabled"/>
                            <input name="namespace" id="kubeResourceNamespace-${key}-${item.getResourceId()}"
                                   type="hidden"
                                   value="${item.getNamespace()}"
                                   disabled="disabled"/>
                            <input name="content" id="kubeResourceContent-${key}-${item.getResourceId()}"
                                   type="hidden"
                                   value="${item.getContent()}"
                                   disabled="disabled"/>
                        </div>
                    </j:forEach>
                </div>
            </j:forEach>
        </div>

        <div id="kubeResourceEditorAll" class="operate-form">

            <!-- <j:forEach items="${it.getResourceTypes()}" var="item">
                <div style="width:90%">
                    <div class="title-left-btn-right">
                        <span>
                            <strong>${item.getApiVersion()} ${item.getKind()}</strong>
                        </span>
                        <input id="kubeResourceTemplate-${item.getId()}" type="button" value="Template"
                               class="form-item-1"/>
                    </div>
                    <div id="kubeResourceEditor-${item.getId()}" style="width:100%">
                    </div>
                </div>
            </j:forEach> -->
        </div>

    </div>

    <script src="https://unpkg.com/codemirror@5.65.17/lib/codemirror.js"/>
    <script src="https://unpkg.com/codemirror@5.65.17/mode/yaml/yaml.js"/>
    <script src="https://unpkg.com/codemirror@5.65.17/addon/lint/lint.js"/>
    <script src="https://unpkg.com/js-yaml@4.1.0/dist/js-yaml.min.js"/>
    <script src="https://unpkg.com/codemirror@5.65.17/addon/lint/yaml-lint.js"/>

    <script type="text/javascript">
        <![CDATA[
        var BASE_URL = '${rootURL}/descriptorByName/io.jenkins.plugins.dumasd.k8s.KubeResourceAlterParameterDefinition'

        function objectToUrlFormEncoded(parameters) {
            // https://stackoverflow.com/a/37562814/4951015
            // Code could be simplified if support for HTMLUnit is dropped
            // body: new URLSearchParams(parameters) is enough then, but it doesn't work in HTMLUnit currently
            let formBody = [];
            for (const property in parameters) {
                const encodedKey = encodeURIComponent(property);
                const encodedValue = encodeURIComponent(parameters[property]);
                formBody.push(encodedKey + "=" + encodedValue);
            }
            return formBody.join("&");
        }

        function onTabClick(option) {
            console.log("TabClick option:", option);
            const kubeResourceEditorDiv = document.getElementById("kubeResourceEditorAll");
            kubeResourceEditorDiv.innerHTML = '';
            const parentDiv = document.getElementById("kubeResource-" + option);
            const childDivs = parentDiv.children;
            for (let i = 0; i < childDivs.length; i++) {
                // resource info
                const kubeResource = childDivs[i];
                const resourceId = kubeResource.getAttribute("name");
                const apiVersionInput = document.getElementById("kubeResourceApiVersion-" + option + "-" + resourceId);
                const kindInput = document.getElementById("kubeResourceKind-" + option + "-" + resourceId);
                const nameInput = document.getElementById("kubeResourceName-" + option + "-" + resourceId);
                const namespaceInput = document.getElementById("kubeResourceNamespace-" + option + "-" + resourceId);
                const contentInput = document.getElementById("kubeResourceContent-" + option + "-" + resourceId);

                // ===== Create Editor Elements and Append
                const editorOperateSpan = document.createElement("span");
                editorOperateSpan.innerText = "ApiVersion: " + apiVersionInput.value + "; Kind:" + kindInput.value + "; Name:" + nameInput.value + "; Namespace:" + namespaceInput.value;
                const editorOperateBtn = document.createElement("input");
                editorOperateBtn.id = "kubeResourceTemplate-" + option + "-" + resourceId;
                editorOperateBtn.type = "button";
                editorOperateBtn.value = "Template";
                const editorOperateDiv = document.createElement("div");
                editorOperateDiv.className = "title-left-btn-right";
                editorOperateDiv.appendChild(editorOperateSpan);
                editorOperateDiv.appendChild(editorOperateBtn);
                const editorParentDiv = document.createElement('div');
                editorParentDiv.className = "editor-operate";
                editorParentDiv.appendChild(editorOperateDiv);

                const editorDiv = document.createElement("div");
                editorDiv.id = "kubeResourceEditor-" + option + "-" + resourceId;
                editorDiv.className = "editor-content";
                editorParentDiv.appendChild(editorDiv);


                kubeResourceEditorDiv.appendChild(editorParentDiv);

                // 创建editor
                const editor = CodeMirror(editorDiv, {
                    value: '',
                    lineNumbers: true,
                    gutters: ["CodeMirror-lint-markers"],
                    lint: true,
                    mode: 'yaml',
                    styleActiveLine: true,
                    highlightDifferences: true,
                    connect: "align"
                });
                editor.setSize(null, "320px");
                editor.currentKey = option;
                editor.resourceId = resourceId;
                editor.setValue(contentInput.value);

                editor.on('change', function (cm, changeObj) {
                    if (changeObj.origin === 'setValue') {
                        cm.clearHistory();
                        return;
                    }
                    contentInput.value = cm.getValue();
                });

                editorOperateBtn.addEventListener("click", function () {
                    if (contentInput.value && contentInput.value.trim().length > 0) {
                        return;
                    }
                    fetch(BASE_URL + "/getTemplate", {
                        method: "post",
                        headers: crumb.wrap({
                            "Content-Type": "application/x-www-form-urlencoded"
                        }),
                        body: objectToUrlFormEncoded({
                            apiVersion: apiVersionInput.value,
                            kind: kindInput.value,
                            name: nameInput.value,
                            namespace: namespaceInput.value
                        })
                    })
                            .then((response) => response.text())
                            .then((data) => {
                                contentInput.value = data;
                                editor.setValue(data);
                            })
                            .catch((err) => {
                                console.log(err);
                            });
                });
            }
        }

        function updateSelectedKubeWorkloads(select) {
            const tabBar = document.querySelector("#selectedKubeWorkloadsTab");
            const optionValues = Array.from(select.selectedOptions).map(e => e.value)
            const optionNames = Array.from(select.selectedOptions).map(e => e.innerText)
            tabBar.innerHTML = ''
            optionValues.forEach((option, index) => {
                const tab = document.createElement("div");
                tab.className = "tab";
                if (index === 0) {
                    tab.classList.add("active");
                }
                // 创建监听
                tab.addEventListener("click", function (e) {
                    e.preventDefault();
                    document.querySelectorAll(".tab").forEach(tab => {
                        tab.classList.remove("active");
                    });
                    tab.classList.add("active");
                    onTabClick(option);
                });

                const tabLink = document.createElement("a");
                tabLink.setAttribute("href", "#");
                tabLink.innerText = optionNames[index];
                tab.append(tabLink);
                tabBar.append(tab);
            });

            if (optionValues.length > 0) {
                const option = optionValues[0];
                onTabClick(option);
            }
        }

        const selectAllBtn = document.getElementById("selectAllBtn");
        selectAllBtn.addEventListener("click", function () {
            const kubeWorkloadSelect = document.querySelector("#kubeWorkloadSelect");
            for (let option of kubeWorkloadSelect.options) {
                option.selected = true;
            }
            updateSelectedKubeWorkloads(kubeWorkloadSelect);
        });

        document.addEventListener('DOMContentLoaded', function () {
            const kubeWorkloadSelect = document.querySelector("#kubeWorkloadSelect");
            kubeWorkloadSelect.disabled = false;
        });
        ]]>
    </script>

</j:jelly>
